/*
 * DFAMainWIn.java
 *
 * Created on 17.09.2009, 20:01:41
 * @author Fabian BÃ¼rger, Kai Winnekens
 */

package gui;

import controller.IncompleteAutomatonException;
import controller.Simulator;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import models.Dfa;
import models.DfaEditor;
import models.EditorToolStates;
import models.State;
import models.Transition;
import java.util.ArrayList; 
import javax.swing.ImageIcon;

public class DFAMainWin extends javax.swing.JFrame implements Observer {

    /** Simulator connected to this window */
    private Simulator dfaSim = null;
    /** Is simulation bar visible? */
    private boolean simBarVisible = false;
    /** Has the current file been changed? */
    private boolean fileChanged = false;
    /** Show welcome window on startup? */
    private boolean showWelcomeWindow = true;
    /** Split size of info bar */
    private final int SPLIT_SIZE_INFO_BAR = 230;
    /** Split size of simulation bar */
    private final int SPLIT_SIZE_SIMULATION_BAR = 260;
    /** Width of the window */
    private final int WINDOW_WIDTH = 720;
    /** Height of the window */
    private final int WINDOW_HEIGHT = 500;
    /** Current file name */
    private String currentFilename = null;
    /** HelpFileLoader that is connected to this window */
    private HelpFileLoader helpFiles = new HelpFileLoader();

    /** icons for play button */
    private ImageIcon iconStartButtonWarning;
    private ImageIcon iconStartButtonOK;

    private boolean isSimultionAllowed = true;
    private String simulationMessage = "";


    /** Creates new form DFAMainWIn */
    public DFAMainWin() {
        
        initComponents();
        this.setSize(new Dimension(WINDOW_WIDTH, WINDOW_HEIGHT));
        centreWindow(this);
        
        iconStartButtonWarning = new ImageIcon(getClass().getResource("/gui/img/sign_start_warning.png"));
        iconStartButtonOK = new ImageIcon(getClass().getResource("/gui/img/sign_startsim.png"));



    }

    /**
     * Returns the simulator that is connected to this window.
     * @return Simulator
     */
    public Simulator getDfaSim() {
        return dfaSim;
    }

    /**
     * Sets the simulator connected to this window.
     * @param dfaSim Simulator
     */
    public void setDfaSim(Simulator dfaSim) {
        this.dfaSim = dfaSim;
        dfaSim.getDfa().addObserver(this);
    }

    private void panelDrawAreaMouseClicked(java.awt.event.MouseEvent evt) {
        if (evt.getClickCount() == 2 && evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
            handleDoubleClick(evt);
        }

        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            if (getDfaSim().getDfaEditor().isAnythingSelected()) {
                popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
            }

        }
    }

    /**
     * Sets if welcome window should be shown on startup. Can be called directly by welcome window.
     * @param val
     */
    void setShowWelcomeWindow(boolean val) {
        this.showWelcomeWindow = val;
    }

/**
 * connect GUI to DFA controller
 */
    public void connectGUItoDFA()
    {
        this.dfaSim.getDfaEditor().setdFAMainWin(this);
        this.dfaSim.getDfaEditor().getdFAPainter().setPaintPanel(this.panelDrawArea);
        this.dfaSim.getDfaEditor().getdFAPainter().setGraphics((Graphics2D)panelDrawArea.getGraphics());
        this.panelDrawArea.setdFAPainter(this.dfaSim.getDfaEditor().getdFAPainter());
        updateButtons();
    }


    /**
     * Shown welcome window / learning center.
     */
    public void openLearningCenter()
    {
       DFAWelcomeWin dFAWelcomeWin = new DFAWelcomeWin(this.showWelcomeWindow);
       dFAWelcomeWin.setdFAMainWin(this);
       dFAWelcomeWin.setVisible(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        popupMenu = new javax.swing.JPopupMenu();
        menuitemEditpopup = new javax.swing.JMenuItem();
        menuitemDeletepopup = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        togglePointer = new javax.swing.JToggleButton();
        toggleAddState = new javax.swing.JToggleButton();
        toggleAddTransition = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        buttonZoomOUT = new javax.swing.JButton();
        buttonZoomIN = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        buttonStartSim = new javax.swing.JButton();
        buttonStopSim = new javax.swing.JButton();
        panelContainer = new javax.swing.JPanel();
        splitterInfobar = new javax.swing.JSplitPane();
        panelMainDrawArea = new javax.swing.JPanel();
        splitterSimulationBar = new javax.swing.JSplitPane();
        panelTop = new javax.swing.JPanel();
        panelDrawArea = new gui.PaintPanel();
        panelConsole = new javax.swing.JPanel();
        panelConsoleTop = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        buttonNextStep = new javax.swing.JButton();
        buttonSimulateAll = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textareaInputWord = new javax.swing.JTextArea();
        buttonReset = new javax.swing.JButton();
        labelAlphabet = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textareaOutput = new javax.swing.JTextArea();
        panelHelpSide = new javax.swing.JPanel();
        SplitterDescriptionHelp = new javax.swing.JSplitPane();
        panelDFADesc = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textDescription = new javax.swing.JTextPane();
        panelHELP = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        editorHelp = new javax.swing.JEditorPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuitemNewDFA = new javax.swing.JMenuItem();
        menuitemOpen = new javax.swing.JMenuItem();
        menuitemSave = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        menuitemExit = new javax.swing.JMenuItem();
        menuDFA = new javax.swing.JMenu();
        menuitemProperties = new javax.swing.JMenuItem();
        menuitemAutocomplete = new javax.swing.JMenuItem();
        menuItemMinimizeDfa = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        menuitemExportImage = new javax.swing.JMenuItem();
        menuSimulation = new javax.swing.JMenu();
        menuitemStartSim = new javax.swing.JMenuItem();
        menuItemStopSim = new javax.swing.JMenuItem();
        menuInfo = new javax.swing.JMenu();
        menuitemLearn = new javax.swing.JMenuItem();
        menuitemInfo = new javax.swing.JMenuItem();

        menuitemEditpopup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/spanner_blue.png"))); // NOI18N
        menuitemEditpopup.setText("Edit object");
        menuitemEditpopup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemEditpopupActionPerformed(evt);
            }
        });
        popupMenu.add(menuitemEditpopup);

        menuitemDeletepopup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/sign_remove.png"))); // NOI18N
        menuitemDeletepopup.setText("Delete object");
        menuitemDeletepopup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemDeletepopupActionPerformed(evt);
            }
        });
        popupMenu.add(menuitemDeletepopup);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("DFA Simulator");
        setBounds(new java.awt.Rectangle(0, 0, 600, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jToolBar1.setRollover(true);
        jToolBar1.setName("Tools"); // NOI18N

        togglePointer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/icon_pointer.png"))); // NOI18N
        togglePointer.setSelected(true);
        togglePointer.setToolTipText("Pointer");
        togglePointer.setFocusable(false);
        togglePointer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        togglePointer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        togglePointer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                togglePointerActionPerformed(evt);
            }
        });
        jToolBar1.add(togglePointer);

        toggleAddState.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/icon_addstate.png"))); // NOI18N
        toggleAddState.setToolTipText("Add state");
        toggleAddState.setFocusable(false);
        toggleAddState.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toggleAddState.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toggleAddState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleAddStateActionPerformed(evt);
            }
        });
        jToolBar1.add(toggleAddState);
        toggleAddState.getAccessibleContext().setAccessibleDescription("Add State");

        toggleAddTransition.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/icon_addtransition.png"))); // NOI18N
        toggleAddTransition.setToolTipText("Add transition");
        toggleAddTransition.setFocusable(false);
        toggleAddTransition.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toggleAddTransition.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toggleAddTransition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleAddTransitionActionPerformed(evt);
            }
        });
        jToolBar1.add(toggleAddTransition);
        jToolBar1.add(jSeparator2);

        buttonZoomOUT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/icon_zoomout.png"))); // NOI18N
        buttonZoomOUT.setToolTipText("Zoom out");
        buttonZoomOUT.setFocusable(false);
        buttonZoomOUT.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonZoomOUT.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonZoomOUT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonZoomOUTActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonZoomOUT);

        buttonZoomIN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/icon_zoomin.png"))); // NOI18N
        buttonZoomIN.setToolTipText("Zoom in");
        buttonZoomIN.setFocusable(false);
        buttonZoomIN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonZoomIN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonZoomIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonZoomINActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonZoomIN);
        jToolBar1.add(jSeparator3);

        buttonStartSim.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/sign_startsim.png"))); // NOI18N
        buttonStartSim.setToolTipText("Define a start state first in order to start the simulation");
        buttonStartSim.setEnabled(false);
        buttonStartSim.setFocusable(false);
        buttonStartSim.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonStartSim.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonStartSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStartSimActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonStartSim);

        buttonStopSim.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/sign_stopsim.png"))); // NOI18N
        buttonStopSim.setToolTipText("Stop simulation");
        buttonStopSim.setEnabled(false);
        buttonStopSim.setFocusable(false);
        buttonStopSim.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonStopSim.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        buttonStopSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStopSimActionPerformed(evt);
            }
        });
        jToolBar1.add(buttonStopSim);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        panelContainer.setLayout(new java.awt.BorderLayout());

        splitterInfobar.setDividerLocation(550);
        splitterInfobar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                splitterInfobarMouseReleased(evt);
            }
        });
        splitterInfobar.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                splitterInfobarComponentMoved(evt);
            }
        });
        splitterInfobar.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                splitterInfobarPropertyChange(evt);
            }
        });

        panelMainDrawArea.setLayout(new java.awt.BorderLayout());

        splitterSimulationBar.setDividerLocation(250);
        splitterSimulationBar.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        panelTop.setPreferredSize(new java.awt.Dimension(100, 600));
        panelTop.setLayout(new java.awt.BorderLayout());

        panelDrawArea.setBackground(new java.awt.Color(255, 255, 255));
        panelDrawArea.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                panelDrawAreaMouseWheelMoved(evt);
            }
        });
        panelDrawArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelDrawAreaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelDrawAreaMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panelDrawAreaMouseReleased(evt);
            }
        });
        panelDrawArea.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                panelDrawAreaComponentShown(evt);
            }
        });
        panelDrawArea.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelDrawAreaMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                panelDrawAreaMouseMoved(evt);
            }
        });
        panelDrawArea.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                panelDrawAreaAncestorResized(evt);
            }
        });
        panelDrawArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                panelDrawAreaKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout panelDrawAreaLayout = new javax.swing.GroupLayout(panelDrawArea);
        panelDrawArea.setLayout(panelDrawAreaLayout);
        panelDrawAreaLayout.setHorizontalGroup(
            panelDrawAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 547, Short.MAX_VALUE)
        );
        panelDrawAreaLayout.setVerticalGroup(
            panelDrawAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 249, Short.MAX_VALUE)
        );

        panelTop.add(panelDrawArea, java.awt.BorderLayout.CENTER);

        splitterSimulationBar.setTopComponent(panelTop);

        panelConsole.setLayout(new java.awt.BorderLayout());

        panelConsoleTop.setMinimumSize(new java.awt.Dimension(10, 20));
        panelConsoleTop.setPreferredSize(new java.awt.Dimension(573, 90));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Simulation");

        buttonNextStep.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/icon_play.png"))); // NOI18N
        buttonNextStep.setText("Next");
        buttonNextStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextStepActionPerformed(evt);
            }
        });

        buttonSimulateAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/icon_fastfwd.png"))); // NOI18N
        buttonSimulateAll.setText("All");
        buttonSimulateAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSimulateAllActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel2.setText("Input word");

        textareaInputWord.setColumns(20);
        textareaInputWord.setRows(5);
        jScrollPane2.setViewportView(textareaInputWord);

        buttonReset.setText("Reset");
        buttonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonResetActionPerformed(evt);
            }
        });

        labelAlphabet.setForeground(java.awt.Color.darkGray);
        labelAlphabet.setText("Alphabet:");

        javax.swing.GroupLayout panelConsoleTopLayout = new javax.swing.GroupLayout(panelConsoleTop);
        panelConsoleTop.setLayout(panelConsoleTopLayout);
        panelConsoleTopLayout.setHorizontalGroup(
            panelConsoleTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelConsoleTopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelConsoleTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelConsoleTopLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelAlphabet))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelConsoleTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonNextStep)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConsoleTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonSimulateAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(176, 176, 176))
        );
        panelConsoleTopLayout.setVerticalGroup(
            panelConsoleTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConsoleTopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelConsoleTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelConsoleTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(labelAlphabet))
                    .addGroup(panelConsoleTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonReset)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConsoleTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addGroup(panelConsoleTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonNextStep)
                        .addComponent(buttonSimulateAll)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelConsole.add(panelConsoleTop, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.BorderLayout());

        textareaOutput.setColumns(20);
        textareaOutput.setEditable(false);
        textareaOutput.setRows(5);
        jScrollPane1.setViewportView(textareaOutput);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        panelConsole.add(jPanel2, java.awt.BorderLayout.CENTER);

        splitterSimulationBar.setRightComponent(panelConsole);

        panelMainDrawArea.add(splitterSimulationBar, java.awt.BorderLayout.CENTER);

        splitterInfobar.setLeftComponent(panelMainDrawArea);

        panelHelpSide.setLayout(new java.awt.BorderLayout());

        SplitterDescriptionHelp.setDividerLocation(150);
        SplitterDescriptionHelp.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jLabel6.setText("DFA description");

        textDescription.setBackground(new java.awt.Color(236, 233, 222));
        textDescription.setBorder(null);
        textDescription.setEditable(false);
        jScrollPane4.setViewportView(textDescription);

        javax.swing.GroupLayout panelDFADescLayout = new javax.swing.GroupLayout(panelDFADesc);
        panelDFADesc.setLayout(panelDFADescLayout);
        panelDFADescLayout.setHorizontalGroup(
            panelDFADescLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDFADescLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDFADescLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                    .addComponent(jLabel6))
                .addContainerGap())
        );
        panelDFADescLayout.setVerticalGroup(
            panelDFADescLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDFADescLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addContainerGap())
        );

        SplitterDescriptionHelp.setTopComponent(panelDFADesc);

        jLabel5.setText("Context help");

        editorHelp.setContentType("text/html");
        editorHelp.setEditable(false);
        jScrollPane3.setViewportView(editorHelp);

        javax.swing.GroupLayout panelHELPLayout = new javax.swing.GroupLayout(panelHELP);
        panelHELP.setLayout(panelHELPLayout);
        panelHELPLayout.setHorizontalGroup(
            panelHELPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHELPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addContainerGap(204, Short.MAX_VALUE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
        );
        panelHELPLayout.setVerticalGroup(
            panelHELPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHELPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
        );

        SplitterDescriptionHelp.setRightComponent(panelHELP);

        panelHelpSide.add(SplitterDescriptionHelp, java.awt.BorderLayout.CENTER);

        splitterInfobar.setRightComponent(panelHelpSide);

        panelContainer.add(splitterInfobar, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelContainer, java.awt.BorderLayout.CENTER);

        jMenuBar1.setName("Tools"); // NOI18N

        menuFile.setText("File");

        menuitemNewDFA.setText("New DFA");
        menuitemNewDFA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemNewDFAActionPerformed(evt);
            }
        });
        menuFile.add(menuitemNewDFA);

        menuitemOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/iconopenfile.png"))); // NOI18N
        menuitemOpen.setText("Open File...");
        menuitemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemOpenActionPerformed(evt);
            }
        });
        menuFile.add(menuitemOpen);

        menuitemSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/iconsavefile.png"))); // NOI18N
        menuitemSave.setText("Save File...");
        menuitemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemSaveActionPerformed(evt);
            }
        });
        menuFile.add(menuitemSave);
        menuFile.add(jSeparator4);

        menuitemExit.setText("Exit");
        menuitemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuitemExit);

        jMenuBar1.add(menuFile);

        menuDFA.setText("DFA");

        menuitemProperties.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/sum.png"))); // NOI18N
        menuitemProperties.setText("Description and definition...");
        menuitemProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemPropertiesActionPerformed(evt);
            }
        });
        menuDFA.add(menuitemProperties);

        menuitemAutocomplete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/bulb_add.png"))); // NOI18N
        menuitemAutocomplete.setText("Autocomplete transitions...");
        menuitemAutocomplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemAutocompleteActionPerformed(evt);
            }
        });
        menuDFA.add(menuitemAutocomplete);

        menuItemMinimizeDfa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/arrow_contract.png"))); // NOI18N
        menuItemMinimizeDfa.setText("Minimize DFA");
        menuItemMinimizeDfa.setEnabled(false);
        menuItemMinimizeDfa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemMinimizeDfaActionPerformed(evt);
            }
        });
        menuDFA.add(menuItemMinimizeDfa);
        menuDFA.add(jSeparator1);

        menuitemExportImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/mime_png.png"))); // NOI18N
        menuitemExportImage.setText("Image export");
        menuitemExportImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemExportImageActionPerformed(evt);
            }
        });
        menuDFA.add(menuitemExportImage);

        jMenuBar1.add(menuDFA);

        menuSimulation.setText("Simulation");
        menuSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSimulationActionPerformed(evt);
            }
        });

        menuitemStartSim.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/arrow_go.png"))); // NOI18N
        menuitemStartSim.setText("Start simulation");
        menuitemStartSim.setEnabled(false);
        menuitemStartSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemStartSimActionPerformed(evt);
            }
        });
        menuSimulation.add(menuitemStartSim);

        menuItemStopSim.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/img/sign_stop.png"))); // NOI18N
        menuItemStopSim.setText("Stop simulation");
        menuItemStopSim.setEnabled(false);
        menuItemStopSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemStopSimActionPerformed(evt);
            }
        });
        menuSimulation.add(menuItemStopSim);

        jMenuBar1.add(menuSimulation);

        menuInfo.setText("Info");
        menuInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuInfoActionPerformed(evt);
            }
        });

        menuitemLearn.setText("Learning center & examples");
        menuitemLearn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemLearnActionPerformed(evt);
            }
        });
        menuInfo.add(menuitemLearn);

        menuitemInfo.setText("About DFA simulator");
        menuitemInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemInfoActionPerformed(evt);
            }
        });
        menuInfo.add(menuitemInfo);

        jMenuBar1.add(menuInfo);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuInfoActionPerformed

    }//GEN-LAST:event_menuInfoActionPerformed

    private void menuitemInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemInfoActionPerformed
        //-- create and show new Info window --
        DFAInfoWin infowin = new DFAInfoWin();
        infowin.setVisible(true);
    }//GEN-LAST:event_menuitemInfoActionPerformed

    private void menuitemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemExitActionPerformed
       setVisible(false);
       dispose();
    }//GEN-LAST:event_menuitemExitActionPerformed

    /** 
     * updates the Sidebar with DFA info panel and help function
     */
    public void updateSidebar()
    {
       if (getDfaSim() != null)
       {
        if (getDfaSim().getDfa().getDescription().length() == 0)
        {
           panelDFADesc.setVisible(false);
           SplitterDescriptionHelp.setDividerSize(1);

        } else
        {
           panelDFADesc.setVisible(true);
           textDescription.setText(getDfaSim().getDfa().getDescription());
           if (SplitterDescriptionHelp.getDividerLocation() < 30)
               SplitterDescriptionHelp.setDividerLocation(120);
           SplitterDescriptionHelp.setDividerSize(5);
        }
       }
    }
    


    private void menuitemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemOpenActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("DFA Simulator Files", "dfa"));
        int retVal = fc.showOpenDialog(this);
        Dfa loaded_dfa = null;
        if (retVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();

            try {
                ObjectInputStream in = new ObjectInputStream(new BufferedInputStream(new FileInputStream(file)));
                loaded_dfa = (Dfa) in.readObject();
                in.close();
                currentFilename = fc.getSelectedFile().getName();
                stopSimulation();

                fileChanged = false;
                this.dfaSim.getDfaEditor().resetEditor();
                dfaSim.setDfa(loaded_dfa);
                loaded_dfa.addObserver(this);

                connectGUItoDFA();
                panelDrawArea.repaint();
                setWindowCaption();
                dfaSim.getDfaEditor().getdFAPainter().optimizeCropPan(20);
            } catch (IOException ex) {
                String msg = "File not found!";
                JOptionPane.showMessageDialog(this, msg, "Error: File not found", JOptionPane.WARNING_MESSAGE);
            } catch (ClassNotFoundException ex) {
                System.err.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_menuitemOpenActionPerformed

/**
 * set the window caption when a file is chosen
 */
    private void setWindowCaption()
    {
        String winName = "DFA Simulator";
        if (currentFilename == null)
        {
            this.setTitle(winName);
        } else
        {
            if (fileChanged)
                this.setTitle(winName+" - "+currentFilename+"*"); else
                this.setTitle(winName+" - "+currentFilename);
        }
    }

    /**
     * Opens one of the demo DFAs.
     * @param d DFA to open.
     */
    public void openDFA(Dfa d)
    {
        stopSimulation();
        currentFilename = "Demo";
        fileChanged = false;
        this.dfaSim.getDfaEditor().resetEditor();
        dfaSim.setDfa(d);
        d.addObserver(this);
        
        connectGUItoDFA();
        panelDrawArea.repaint();
        setWindowCaption();
        dfaSim.getDfaEditor().getdFAPainter().optimizeCropPan(-30);
    }


    private void toggleAddTransitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleAddTransitionActionPerformed
        getDfaSim().getDfaEditor().setToolState(EditorToolStates.addTransition);
        dfaSim.getDfaEditor().removeAllSelections();
        updateButtons();
        repaint();
    }//GEN-LAST:event_toggleAddTransitionActionPerformed

    private void togglePointerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_togglePointerActionPerformed
        getDfaSim().getDfaEditor().setToolState(EditorToolStates.handTool);
        dfaSim.getDfaEditor().removeAllSelections();
        updateButtons();
        repaint();
    }//GEN-LAST:event_togglePointerActionPerformed

    private void toggleAddStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleAddStateActionPerformed
        getDfaSim().getDfaEditor().setToolState(EditorToolStates.addState);
        dfaSim.getDfaEditor().removeAllSelections();
        updateButtons();
        repaint();
    }//GEN-LAST:event_toggleAddStateActionPerformed

    private void menuitemPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemPropertiesActionPerformed
        DFAPropertiesWin dwin = new DFAPropertiesWin();

        dwin.setDfa(getDfaSim().getDfa());
        dwin.setdFAMainWin(this);
        //dwin.setAlwaysOnTop(true);
        dwin.setVisible(true);


    }//GEN-LAST:event_menuitemPropertiesActionPerformed

    private void buttonSimulateAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSimulateAllActionPerformed
        do {
            doNextStep();
        } while(dfaSim.getIsRunning());
        panelDrawArea.repaint();
    }//GEN-LAST:event_buttonSimulateAllActionPerformed

    private void buttonNextStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextStepActionPerformed
       doNextStep();
       panelDrawArea.repaint();
    }//GEN-LAST:event_buttonNextStepActionPerformed

    /**
     * Removes selection from input area.
     */
    private void resetSimulationBar()
    {
        textareaInputWord.setSelectionStart(0);
        textareaInputWord.setSelectionEnd(0);
    }

    /**
     * next step in Simulation and visualisation
     */
    private void doNextStep() {
        String inputWord = textareaInputWord.getText();
        Dfa dfa = dfaSim.getDfa();
        State activeState = dfa.getCurrentState();
        State nextState;
        //handle the empty word
        if (!inputWord.equals("")) {
            if (!dfaSim.getIsRunning()) {
                try {
                    dfaSim.startSimulation(inputWord);
                } catch (IncompleteAutomatonException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Cannot start simulation", JOptionPane.WARNING_MESSAGE);
                    textareaInputWord.setSelectionStart(0);
                    textareaInputWord.setSelectionEnd(textareaInputWord.getText().length());
                    textareaInputWord.requestFocus();
                    return;
                }
            }
            textareaInputWord.setEditable(false);
            int pos = dfa.getCurrentPosition();
            dfaSim.nextStep();
            nextState = dfa.getCurrentState();
            highlightCurrentPosition(pos);
            outputInfo(activeState, nextState, pos);
        }
        if(!dfaSim.getIsRunning()) {
            //All input has been read
            buttonNextStep.setEnabled(false);
            buttonSimulateAll.setEnabled(false);
            String acceptMsg = "The DFA ";
            if(dfaSim.isAccepting()) {
                acceptMsg += "ACCEPTS the input word!";
            } else {
                acceptMsg += "does NOT accept the input word!";
            }
            textareaOutput.setText(textareaOutput.getText()+acceptMsg);
        }
    }

    /**
     * Output information during simulation.
     * @param fromState Source state.
     * @param toState Target state.
     * @param pos Current reading position in input string.
     */
    private void outputInfo(State fromState, State toState, int pos) {
        String input = textareaInputWord.getText().substring(pos, pos+1);
        String msg = "Reading input '"+input+"' and taking Transition from State ";
        msg += fromState.getState_Properties().getName()+" to State ";
        msg += toState.getState_Properties().getName()+".\n";
        textareaOutput.setText(textareaOutput.getText()+msg);
    }

    /**
     * Highlights the current readning position in input string.
     * @param pos Current readning position.
     */
    private void highlightCurrentPosition(int pos) {
        textareaInputWord.requestFocus();
        textareaInputWord.setSelectionColor(Color.red);
        textareaInputWord.setSelectionStart(pos);
        textareaInputWord.setSelectionEnd(pos+1);
    }

    private void buttonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetActionPerformed
        textareaInputWord.setEditable(true);
        textareaOutput.setText("");
        buttonNextStep.setEnabled(true);
        buttonSimulateAll.setEnabled(true);
        dfaSim.resetDfa();
        dfaSim.getDfa().setInput(textareaInputWord.getText());
        panelDrawArea.repaint();
    }//GEN-LAST:event_buttonResetActionPerformed

    /**
     * Returns the program's config file. Note: This file does not need to be existing!
     * @return Config file.
     */
    static File getConfigFile() {
        File homedir = new File(System.getProperty("user.home"));
        File config = null;
        String os = System.getProperty("os.name").toLowerCase();
        if (os.contains("windows")) {
            //handle windows systems
            config = new File(homedir, "\\dfasimulator.cfg");
        } else if (os.contains("linux") || os.contains("mac") || os.contains("solaris")) {
            //handle unix systems
            config = new File(homedir, "/.dfasimulator");
        }
        return config;
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       File config = getConfigFile();
       connectGUItoDFA();
       repaint();
       if(!config.exists()) {
           openLearningCenter();
           this.showWelcomeWindow = true;
       } else {
           this.showWelcomeWindow = false;
       }
    }//GEN-LAST:event_formWindowOpened

    private void panelDrawAreaAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_panelDrawAreaAncestorResized

    }//GEN-LAST:event_panelDrawAreaAncestorResized

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
       
    }//GEN-LAST:event_formWindowActivated

    private void panelDrawAreaComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_panelDrawAreaComponentShown

    }//GEN-LAST:event_panelDrawAreaComponentShown

    private void panelDrawAreaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDrawAreaMousePressed
        getDfaSim().getDfaEditor().handleMousePressed(evt);
        fileChanged = true;
        setWindowCaption();

    }//GEN-LAST:event_panelDrawAreaMousePressed

    private void panelDrawAreaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDrawAreaMouseReleased
        panelDrawArea.requestFocus();
        getDfaSim().getDfaEditor().handleMouseReleased(evt);
        updateToolButtons();
        
    }//GEN-LAST:event_panelDrawAreaMouseReleased

    private void panelDrawAreaMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDrawAreaMouseMoved
        getDfaSim().getDfaEditor().handleMouseMoved(evt);

    }//GEN-LAST:event_panelDrawAreaMouseMoved


    private void panelDrawAreaMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDrawAreaMouseDragged
        getDfaSim().getDfaEditor().handleMouseDragged(evt);
    }//GEN-LAST:event_panelDrawAreaMouseDragged

    private void menuitemStartSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemStartSimActionPerformed
        startSimulation();
    }//GEN-LAST:event_menuitemStartSimActionPerformed

    /**
     * Starts a new simulation.
     */
    private void startSimulation()
    {
        if (isSimultionAllowed)
        {
            this.simBarVisible = true;
            panelConsole.setVisible(true);
            splitterSimulationBar.setDividerLocation(0.65);
            menuItemStopSim.setEnabled(true);
            menuitemStartSim.setEnabled(false);
            menuitemAutocomplete.setEnabled(false);
            menuitemProperties.setEnabled(false);
            menuItemMinimizeDfa.setEnabled(false);
            buttonStartSim.setEnabled(false);
            buttonStopSim.setEnabled(true);
            dfaSim.getDfaEditor().setIsEditable(false);
            dfaSim.getDfaEditor().setToolState(EditorToolStates.noTool);
            dfaSim.setSimulationModeActive(true);
            dfaSim.getDfaEditor().removeAllSelections();
            resetSimulationBar();
            dfaSim.getDfa().setInput(textareaInputWord.getText());
            String aCaption = getCommaStringFromArrayList(getDfaSim().getAlphabetFromTransitions());
            if (aCaption.length() > 30)
                           aCaption = aCaption.substring(0, 30)+"...";
            labelAlphabet.setText(" Alphabet: {"+aCaption+"}");
            updateButtons();
            textareaInputWord.requestFocus();
        } else
        {
            JOptionPane.showMessageDialog(this, simulationMessage, "Simulation", JOptionPane.WARNING_MESSAGE);

        }


 
    }

    /**
     * Computes a comma seperated string representation of the input array.
     * @param a Input array, usually alphabet.
     * @return String representation.
     */
    private String getCommaStringFromArrayList(ArrayList<String> a)
    {
        if (a.size() == 0)
        {
            return "No transitions set yet.";
        } else
        {
            String s = "";
            for (int i=0;i<a.size();i++)
            {
                if (i != a.size()-1)
                    s = s + a.get(i) + ",";
                else
                    s = s + a.get(i);
            }
            return s;
        }

    }

    private void menuitemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemSaveActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("DFA Simulator Files", "dfa"));
        int retVal = fc.showSaveDialog(this);
        if (retVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String fpath = file.getPath();

            if (!fpath.toLowerCase().endsWith(".dfa")) {
                String newName = fpath + ".dfa";
                file = new File(newName);
            }
            if (file.exists()) {
                String msg = "The file you have chosen already exists! Do you want to overwrite this file?";
                retVal = JOptionPane.showConfirmDialog(this, msg, "Overwrite?", JOptionPane.YES_NO_CANCEL_OPTION);
            } else {
                retVal = JOptionPane.YES_OPTION;
            }
            switch (retVal) {
                case JOptionPane.YES_OPTION:
                    try {
                        ObjectOutputStream out = null;
                        out = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(file)));
                        out.writeObject(this.dfaSim.getDfa());
                        fileChanged = false;
                         currentFilename = file.getName();
                        setWindowCaption();
                        out.close();
                    } catch (FileNotFoundException ex) {
                        String msg = "Could not find the selected file!";
                        JOptionPane.showMessageDialog(this, msg, "Error: File not found", JOptionPane.WARNING_MESSAGE);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.WARNING_MESSAGE);
                    }
                    break;
                case JOptionPane.NO_OPTION:
                    menuitemSaveActionPerformed(evt);
                    break;
                default:
                    //do nothing
            }
        }
    }//GEN-LAST:event_menuitemSaveActionPerformed

    private void menuItemStopSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemStopSimActionPerformed
        stopSimulation();
    }//GEN-LAST:event_menuItemStopSimActionPerformed

    /**
     * Stops the simulation mode and returns to 'normal' mode.
     */
    private void stopSimulation()
    {
        this.simBarVisible = false;
        panelConsole.setVisible(false);
        menuItemStopSim.setEnabled(false);
        menuitemStartSim.setEnabled(true);
        menuitemAutocomplete.setEnabled(true);
        menuitemProperties.setEnabled(true);
        menuItemMinimizeDfa.setEnabled(true);
        buttonStartSim.setEnabled(true);
        buttonStopSim.setEnabled(false);

        dfaSim.getDfaEditor().setIsEditable(true);
        dfaSim.getDfaEditor().setToolState(EditorToolStates.handTool);
        dfaSim.setSimulationModeActive(false);
        updateButtons();
    }

    private void panelDrawAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_panelDrawAreaKeyPressed
     getDfaSim().getDfaEditor().handleEditorKeyPressed(evt);
     updateToolButtons();
        
    }//GEN-LAST:event_panelDrawAreaKeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

        
    }//GEN-LAST:event_formKeyPressed

    private void menuitemNewDFAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemNewDFAActionPerformed
        stopSimulation();
        createNewDFA();
    }//GEN-LAST:event_menuitemNewDFAActionPerformed

    /**
     * Set split pane sizes.
     */
    private void controlSplitPaneSizes()
    {
        splitterInfobar.setDividerLocation(this.getWidth()-SPLIT_SIZE_INFO_BAR);
        splitterSimulationBar.setDividerLocation(this.getHeight()-SPLIT_SIZE_SIMULATION_BAR);
    }


    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (fileChanged)
        {
            if (askUserMessageBoxYesNo("Exit", "Exit program without saving?"))
            {
                System.exit(0);
            }
        } else
            System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized

    }//GEN-LAST:event_formAncestorResized

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
         controlSplitPaneSizes();
    }//GEN-LAST:event_formComponentResized

    private void splitterInfobarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_splitterInfobarMouseReleased
       
    }//GEN-LAST:event_splitterInfobarMouseReleased

    private void splitterInfobarComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_splitterInfobarComponentMoved

    }//GEN-LAST:event_splitterInfobarComponentMoved

    private void splitterInfobarPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_splitterInfobarPropertyChange

    }//GEN-LAST:event_splitterInfobarPropertyChange

    private void menuItemMinimizeDfaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemMinimizeDfaActionPerformed
        fileChanged = true;
        int statesbefore = dfaSim.getDfa().getStates().size();
        Dfa minimized = null;
        try {
            minimized = dfaSim.minimizeDfa(dfaSim.getDfa());
            dfaSim.setDfa(minimized);
            int statesafter = dfaSim.getDfa().getStates().size();
            dfaSim.getDfa().autoArrangeDFA();
            repaint();
            dfaSim.getDfaEditor().getdFAPainter().optimizeCropPan(40);
            panelDrawArea.repaint();
            JOptionPane.showMessageDialog(this, "The DFA is minimized now. States before: "+statesbefore+", now: "+statesafter+".\nThe number of states is minimized and it will still accept the same language.\nNote: The DFA does not have to be easier to understand now.", "DFA minimized", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.WARNING_MESSAGE);
        }
        panelDrawArea.repaint();
        setWindowCaption();
    }//GEN-LAST:event_menuItemMinimizeDfaActionPerformed

    private void menuitemExportImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemExportImageActionPerformed
  JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("PNG Image Files (lossless)", "png"));
        int retVal = fc.showSaveDialog(this);
        if (retVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String fpath = file.getPath();

            if (!fpath.toLowerCase().endsWith(".png")) {
                String newName = fpath + ".png";
                file = new File(newName);
            }
            

            if (file.exists()) {
                String msg = "The file you have chosen already exists! Do you want to overwrite this file?";
                retVal = JOptionPane.showConfirmDialog(this, msg, "Overwrite?", JOptionPane.YES_NO_CANCEL_OPTION);
            } else {
                retVal = JOptionPane.YES_OPTION;
            }
            switch (retVal) {
                case JOptionPane.YES_OPTION:

                    if (getDfaSim().getDfaEditor().getdFAPainter().exportPNGFile(file))
                        repaint();
                   break;
                case JOptionPane.NO_OPTION:
                    menuitemExportImageActionPerformed(evt);
                    break;
                default:
                    //do nothing
            }
        }
    }//GEN-LAST:event_menuitemExportImageActionPerformed

    private void menuitemAutocompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemAutocompleteActionPerformed
        DFAAutoCompleteWin win = new DFAAutoCompleteWin();
        //win.setAlwaysOnTop(true);
        win.setdFAMainWin(this);
        win.setSim(dfaSim);
        win.setVisible(true);
        fileChanged = true;
        setWindowCaption();
    }//GEN-LAST:event_menuitemAutocompleteActionPerformed

    private void menuitemEditpopupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemEditpopupActionPerformed
     getDfaSim().getDfaEditor().handleDoubleClick(null);
    }//GEN-LAST:event_menuitemEditpopupActionPerformed

    private void buttonZoomINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonZoomINActionPerformed
        zoomIN(null);
    }//GEN-LAST:event_buttonZoomINActionPerformed

    private void buttonZoomOUTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonZoomOUTActionPerformed
        zoomOUT(null);
    }//GEN-LAST:event_buttonZoomOUTActionPerformed

    private void panelDrawAreaMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_panelDrawAreaMouseWheelMoved
        if (evt.getWheelRotation() < 0)
        {
            zoomIN(evt);
        } else
            zoomOUT(evt);
    }//GEN-LAST:event_panelDrawAreaMouseWheelMoved

    private void menuitemLearnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemLearnActionPerformed
        openLearningCenter();
    }//GEN-LAST:event_menuitemLearnActionPerformed

    private void menuSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSimulationActionPerformed
        
    }//GEN-LAST:event_menuSimulationActionPerformed

    private void buttonStartSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStartSimActionPerformed
        startSimulation();
    }//GEN-LAST:event_buttonStartSimActionPerformed

    private void buttonStopSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStopSimActionPerformed
        stopSimulation();
    }//GEN-LAST:event_buttonStopSimActionPerformed

    private void menuitemDeletepopupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemDeletepopupActionPerformed
         getDfaSim().getDfaEditor().handleDeleteObject(null);
    }//GEN-LAST:event_menuitemDeletepopupActionPerformed

/**
 * zoom the view
 */
    private void zoomIN(java.awt.event.MouseWheelEvent evt)
    {
        if (dfaSim.getDfaEditor().getZoomfactor()<3)
        {
             double z = getDfaSim().getDfaEditor().getZoomfactor();
             dfaSim.getDfaEditor().setZoomfactor(z*1.5);

             double newoffsetX = getDfaSim().getDfaEditor().getOffsetX()*1.5;
             double newoffsetY = getDfaSim().getDfaEditor().getOffsetY()*1.5;

             if (evt != null)
             {
                newoffsetX = newoffsetX -(evt.getX()/2);
                newoffsetY = newoffsetY -(evt.getY()/2);
             }
             getDfaSim().getDfaEditor().setOffsetX((int)newoffsetX);
             getDfaSim().getDfaEditor().setOffsetY((int)newoffsetY);
             if (dfaSim.getDfaEditor().getZoomfactor() > 2.8)
                 buttonZoomIN.setEnabled(false);
             buttonZoomOUT.setEnabled(true);
        } 
        repaint();
    }

/**
 * zoom the view
 */
    private void zoomOUT(java.awt.event.MouseWheelEvent evt)
    {
        if (dfaSim.getDfaEditor().getZoomfactor()>0.4)
        {
             double z = getDfaSim().getDfaEditor().getZoomfactor();
             dfaSim.getDfaEditor().setZoomfactor(z/1.5);

             double newoffsetX = getDfaSim().getDfaEditor().getOffsetX()/1.5;
             double newoffsetY = getDfaSim().getDfaEditor().getOffsetY()/1.5;

             if (evt != null)
             {
                newoffsetX = newoffsetX +(evt.getX()/3);
                newoffsetY = newoffsetY +(evt.getY()/3);
             }
             getDfaSim().getDfaEditor().setOffsetX((int)newoffsetX);
             getDfaSim().getDfaEditor().setOffsetY((int)newoffsetY);
             if (dfaSim.getDfaEditor().getZoomfactor() < 0.5)
                 buttonZoomOUT.setEnabled(false);
             buttonZoomIN.setEnabled(true);
        }           
        repaint();
    }

    /**
     * Creates a new DFA.
     */
    private void createNewDFA()
    {
        if (askUserMessageBoxYesNo("new DFA", "Do you want to create an empty DFA?"))
        {
            Dfa ndfa = new Dfa();
            currentFilename = null;
            fileChanged = false;
            getDfaSim().getDfaEditor().setDfa(ndfa);
            this.getDfaSim().setDfa(ndfa);
            ndfa.addObserver(this);
            repaint();
        }
    }


    /**
     * Handles a double click.
     * @param evt
     */
    private void handleDoubleClick(java.awt.event.MouseEvent evt)
    {
        getDfaSim().getDfaEditor().handleDoubleClick(evt);
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DFAMainWin().setVisible(true);
                
            }
        });
    }

    /**
     * Places the window in the center of the screen.
     * @param frame Window to place.
     */
public static void centreWindow(JFrame frame) {
    Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
    int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
    int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
    frame.setLocation(x, y);
}

/**
 * Updates all buttons.
 */
public void updateButtons()
{
    panelConsole.setVisible(simBarVisible);
    updateToolButtons();
    updateSidebar();
    manageHelp();
}

/**
 * Sets the help view according to what is done with the program.
 */
public void manageHelp()
{
    String currentSite = "";
    if (!getDfaSim().isSimulationModeActive())
    {
        if (getDfaSim().getDfaEditor().getToolState() == EditorToolStates.handTool)
        currentSite = "handtool";
        if (getDfaSim().getDfaEditor().getToolState() == EditorToolStates.addState)
        currentSite = "addstatetool";
        if (getDfaSim().getDfaEditor().getToolState() == EditorToolStates.addTransition)
        currentSite = "addtransitiontool";
      
    } else
        currentSite ="simulation";

    if (!currentSite.equals(""))
        showHelpFile(currentSite);

}

/**
 * Shows a specific help page.
 * @param pageName Key for the page to display.
 */
public void showHelpFile(String pageName)
{
        try {
            editorHelp.setPage(helpFiles.getUrlByKey(pageName));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
}

/**
 * update the UIButtons for the tools
 */
public void updateToolButtons()
{
    DfaEditor e = this.dfaSim.getDfaEditor();
    
    togglePointer.setSelected(e.getToolState() == EditorToolStates.handTool);
    toggleAddState.setSelected(e.getToolState() == EditorToolStates.addState);
    toggleAddTransition.setSelected(e.getToolState() == EditorToolStates.addTransition);
    
    togglePointer.setEnabled(e.isEditable());
    toggleAddState.setEnabled(e.isEditable());
    toggleAddTransition.setEnabled(e.isEditable());
}

/**
 * Shows the state properties window.
 * @param s State.
 * @param newState <code>true</code> if <code>s</code> is a new state.
 */
public void showStateEditWin(State s, boolean newState)
{
        DFAStatePropertiesWin stprowin = new DFAStatePropertiesWin();
       // stprowin.setAlwaysOnTop(true);
        stprowin.setState(s);
        stprowin.setdFAMainWin(this);
        stprowin.setNewElement(newState);
        stprowin.setVisible(true);
        stprowin.requestFocus();
        this.dfaSim.getDfaEditor().setWaitForEditWindow(true);
}

/**
 * Shows the transition properties window.
 * @param t Transition.
 * @param newTrans <code>true</code> if <code>t</code> is a new transition.
 */
public void showTransEditWin(Transition t, boolean newTrans)
{
        DFATransitionWin trwin = new DFATransitionWin();
        //trwin.setAlwaysOnTop(true);
        trwin.setTransition(t);
        trwin.setdFAMainWin(this);
        trwin.setnewElement(newTrans);
        trwin.setVisible(true);
        trwin.requestFocus();
        this.dfaSim.getDfaEditor().setWaitForEditWindow(true);
}

public void handleCloseEditWindow()
{
    this.dfaSim.getDfaEditor().setWaitForEditWindow(false);
}

/**
 * Shows a message box with yes/no buttons.
 * @param title Title.
 * @param message Message.
 * @return <code>true</code>, if 'yes' has been clicked.
 */
public boolean askUserMessageBoxYesNo(String title, String message)
{
    int n = JOptionPane.showConfirmDialog(
        this,
        message,
        title,
        JOptionPane.YES_NO_OPTION);
    return n == 0;

}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane SplitterDescriptionHelp;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonNextStep;
    private javax.swing.JButton buttonReset;
    private javax.swing.JButton buttonSimulateAll;
    private javax.swing.JButton buttonStartSim;
    private javax.swing.JButton buttonStopSim;
    private javax.swing.JButton buttonZoomIN;
    private javax.swing.JButton buttonZoomOUT;
    private javax.swing.JEditorPane editorHelp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel labelAlphabet;
    private javax.swing.JMenu menuDFA;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuInfo;
    private javax.swing.JMenuItem menuItemMinimizeDfa;
    private javax.swing.JMenuItem menuItemStopSim;
    private javax.swing.JMenu menuSimulation;
    private javax.swing.JMenuItem menuitemAutocomplete;
    private javax.swing.JMenuItem menuitemDeletepopup;
    private javax.swing.JMenuItem menuitemEditpopup;
    private javax.swing.JMenuItem menuitemExit;
    private javax.swing.JMenuItem menuitemExportImage;
    private javax.swing.JMenuItem menuitemInfo;
    private javax.swing.JMenuItem menuitemLearn;
    private javax.swing.JMenuItem menuitemNewDFA;
    private javax.swing.JMenuItem menuitemOpen;
    private javax.swing.JMenuItem menuitemProperties;
    private javax.swing.JMenuItem menuitemSave;
    private javax.swing.JMenuItem menuitemStartSim;
    private javax.swing.JPanel panelConsole;
    private javax.swing.JPanel panelConsoleTop;
    private javax.swing.JPanel panelContainer;
    private javax.swing.JPanel panelDFADesc;
    private gui.PaintPanel panelDrawArea;
    private javax.swing.JPanel panelHELP;
    private javax.swing.JPanel panelHelpSide;
    private javax.swing.JPanel panelMainDrawArea;
    private javax.swing.JPanel panelTop;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JSplitPane splitterInfobar;
    private javax.swing.JSplitPane splitterSimulationBar;
    private javax.swing.JTextPane textDescription;
    private javax.swing.JTextArea textareaInputWord;
    private javax.swing.JTextArea textareaOutput;
    private javax.swing.JToggleButton toggleAddState;
    private javax.swing.JToggleButton toggleAddTransition;
    private javax.swing.JToggleButton togglePointer;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets called when the DFA changes.
     * @param o Changed DFA.
     * @param arg Some Argument, can be <code>null</code>.
     */
    @Override
    public void update(Observable o, Object arg) {
        if(o instanceof Dfa) {
            Dfa dfa = (Dfa)o;
            String tooltip;
            if(dfa.getStartState() != null) {
                isSimultionAllowed = true;
                simulationMessage = "";
                tooltip = "Run Simulation";
                this.menuitemStartSim.setEnabled(true);

                this.menuItemMinimizeDfa.setEnabled(true);
                this.buttonStartSim.setEnabled(true);
                if (iconStartButtonOK != null)
                    this.buttonStartSim.setIcon(iconStartButtonOK);
                this.buttonStartSim.setToolTipText(tooltip);
            } else {
                isSimultionAllowed = false;
                if (dfa.getStates().size() > 0)
                    simulationMessage = "Define a start state first in order to start the simulation.\nDoubleclick on the wished state and tick the 'start state' box.";
                else
                    simulationMessage = "Can't start simulation without states. Add at least one state with the 'add state' tool.";
                tooltip = "Define a start state first in order to start the simulation";
                this.menuitemStartSim.setEnabled(true);
                this.menuItemMinimizeDfa.setEnabled(false);
                this.buttonStartSim.setEnabled(true);
                if (iconStartButtonWarning != null)
                    this.buttonStartSim.setIcon(iconStartButtonWarning);
                this.buttonStartSim.setToolTipText(tooltip);
            }
            System.out.println("change");
        }




    }

}
